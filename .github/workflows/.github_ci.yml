name: CI

on: [push, pull_request]

jobs:
  flake8-lint:
    name: Run lint
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Install deps
        run: pip install flake8

      - name: Flake8
        run: flake8

#  pytest:
#    name: Testing
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Install deps
#        run: |
#          sudo apt-get install tk -y
#          sudo apt-get install fonts-noto pkg-config libboost-python-dev libboost-thread-dev libbluetooth-dev libglib2.0-dev python-dev -y
#          pip install poetry==1.1.11
#          poetry config virtualenvs.in-project true
#          poetry update
#          poetry install
#
#      - name: Run Pytest
#        run: |
#          export $(cat .env | xargs)
#          source .venv/bin/activate
#          export PYTHONPATH=$(pwd)
#          coverage run -m pytest --junitxml=tests_execution_report.xml
#          coverage xml -i

#  build-staging:
#    name: Build Staging
#    runs-on: ubuntu-latest
#    # needs: pytest
#    if: ${{startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'dev')}}
#
#    steps:
#      - name: Set env
#        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - uses: actions/checkout@v2
#      - name: Publish Image
#        uses: craftech-io/package-action@v3.1.0
#        with:
#          tags: ${{ env.RELEASE_VERSION }}
#          dockerfile: Dockerfile
#          access_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
#    needs: [build-staging]
    if: ${{startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'dev')}}

    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Generate Image
        uses: docker/build-push-action@v2
        with:
          tags: andromeda:${{ env.RELEASE_VERSION }}
          push: false
      - name: Generate Dist
        run: |
          sudo docker run -v $(pwd)/:/home/ andromeda:${{ env.RELEASE_VERSION }} pyinstaller main.py -n andromeda --add-data="imgs:imgs" --collect-submodules="PIL"
          cd dist
      - name: Compress Release
        uses: papeloto/action-zip@v1
        with:
          files: andromeda
          recursive: true
          dest: andromeda_${{ env.RELEASE_VERSION }}.zip
      - name: Release Exec
        uses: softprops/action-gh-release@v1
        with:
          files: andromeda_${{ env.RELEASE_VERSION }}.zip
      - uses: actions/upload-artifact@v1
        with:
          name: andromeda:latest
          path: ${{ github.workspace }}/andromeda_${{ env.RELEASE_VERSION }}.zip


#  build-production:
#    name: Build Production
#    runs-on: ubuntu-latest
#    needs: pytest
#    if: ${{startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'dev')}}
#
#    steps:
#      - name: Set env
#        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - uses: actions/checkout@v2
#      - name: Publish Image
#        uses: craftech-io/package-action@v3.1.0
#        with:
#          tags: ${{ env.RELEASE_VERSION }}
#          dockerfile: Dockerfile
#          access_token: ${{ secrets.GITHUB_TOKEN }}
#
#  deploy-production:
#    name: Deploy Production
#    runs-on: ubuntu-latest
#    needs: [pytest, build-production]
#    if: ${{startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'dev')}}
#
#    steps:
#      - uses: actions/checkout@v2
#      - uses: akhileshns/heroku-deploy@v3.12.12
#        with:
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#          heroku_app_name: pi2-andromeda-server
#          heroku_email: medeirosrosalucas@gmail.com
#          usedocker: true